/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-palm'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'react-palm' {
  declare module.exports: any;
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'react-palm/actions' {
  declare module.exports: any;
}

declare module 'react-palm/history' {
  declare module.exports: any;
}

declare module 'react-palm/routing' {
  declare module.exports: any;
}

declare module 'react-palm/subscriptions' {
  declare module.exports: any;
}

declare module 'react-palm/tasks' {
  // the plus signs here are essentially magic.
  // https://stackoverflow.com/questions/15305499/why-there-is-a-plus-sign-before-this-type
  declare export interface Task$TaskInstance<+T1, +E1> {
    map<T2>(fn: (value: T1) => T2): Task$TaskInstance<T2, E1>;
    bimap<T2>(
      fn: (value: T1) => T2,
      err: (value: E1) => E2
    ): Task$TaskInstance<T2, E2>;
    payload: any;
    type: string;
  }

  // declare export function withTask<T>(
  //   state: T,
  //   tasks: Task$TaskInstance<any, any>[]
  // ): T;

  // for tasks that have a success or error result
  declare export function taskCreator<P, V, E>(
    runner: (
      payload: P,
      success: (value: V) => void,
      error: (value: E) => void
    ) => void | Promise<any>,
    label: string
  ): (payload: P) => Task$TaskInstance<V, E>;

  // for tasks which do not succeed or error
  // declare export function taskCreator<P>(
  //   runner: (payload: P) => void | Promise<void>,
  //   label: string
  // ): (payload: P) => Task$TaskInstance<void, void>;

  declare type ExtractResolve = <V>(Task$TaskInstance<V, any>) => V;
  declare type ExtractError = <E>(Task$TaskInstance<any, E>) => E;

  declare export var Task: {
    all<O: $ReadOnlyArray<Task$TaskInstance<mixed, mixed>>>(o: O):
      Task$TaskInstance<
        $TupleMap<O, ExtractResolve>,
        $TupleMap<O, ExtractError>
      >
  };

  declare export function disableStackCapturing(): void;
  declare export function succeedTaskInTest<T, E>(task: Task$TaskInstance<T, E>, value: T): any;
}

// Filename aliases
declare module 'react-palm/actions.js' {
  declare module.exports: $Exports<'react-palm/actions'>;
}
declare module 'react-palm/history.js' {
  declare module.exports: $Exports<'react-palm/history'>;
}
declare module 'react-palm/routing.js' {
  declare module.exports: $Exports<'react-palm/routing'>;
}
declare module 'react-palm/subscriptions.js' {
  declare module.exports: $Exports<'react-palm/subscriptions'>;
}
declare module 'react-palm/tasks.js' {
  declare module.exports: $Exports<'react-palm/tasks'>;
}
